{
  "pluginType": "JS",
  "pluginId": "js-plugin",
  "unpublishedAction": {
    "name": "csv2JSON",
    "fullyQualifiedName": "UploadCSVHelper.csv2JSON",
    "datasource": {
      "name": "UNUSED_DATASOURCE",
      "pluginId": "js-plugin",
      "messages": [],
      "isAutoGenerated": false,
      "deleted": false,
      "policies": [],
      "userPermissions": []
    },
    "pageId": "AllCompoundsNoFilter",
    "collectionId": "AllCompoundsNoFilter_UploadCSVHelper",
    "actionConfiguration": {
      "timeoutInMillisecond": 10000,
      "paginationType": "NONE",
      "encodeParamsToggle": true,
      "body": "(strData, strDelimiter) => {\n  strDelimiter = strDelimiter || \",\";\n  var objPattern = new RegExp(\"(\\\\\" + strDelimiter + \"|\\\\r?\\\\n|\\\\r|^)\" + '(?:\"([^\"]*(?:\"\"[^\"]*)*)\"|' + '([^\"\\\\' + strDelimiter + \"\\\\r\\\\n]*))\", \"gi\");\n  var arrData = [[]];\n  var arrMatches = null;\n  while (arrMatches = objPattern.exec(strData)) {\n    var strMatchedDelimiter = arrMatches[1];\n    if (strMatchedDelimiter.length && strMatchedDelimiter !== strDelimiter) {\n      arrData.push([]);\n    }\n    var strMatchedValue;\n    if (arrMatches[2]) {\n      strMatchedValue = arrMatches[2].replace(new RegExp('\"\"', \"g\"), '\"');\n    } else {\n      strMatchedValue = arrMatches[3];\n    }\n    arrData[arrData.length - 1].push(strMatchedValue);\n  }\n  var headers = arrData[0];\n  var result = [];\n  for (let i = 1; i < arrData.length; i++) {\n    var obj = {};\n    var currentline = arrData[i];\n    for (var j = 0; j < headers.length; j++) {\n      obj[headers[j]] = currentline[j];\n    }\n    obj['CompoundId'] = Generator.getUUID();\n    obj['BatchId'] = appsmith.URL.queryParams.BatchId;\n    result.push(obj);\n  }\n  return result;\n}",
      "selfReferencingDataPaths": [],
      "jsArguments": [
        {},
        {}
      ],
      "isAsync": false
    },
    "executeOnLoad": false,
    "dynamicBindingPathList": [
      {
        "key": "body"
      }
    ],
    "isValid": true,
    "invalids": [],
    "messages": [],
    "jsonPathKeys": [
      "(strData, strDelimiter) => {\n  strDelimiter = strDelimiter || \",\";\n  var objPattern = new RegExp(\"(\\\\\" + strDelimiter + \"|\\\\r?\\\\n|\\\\r|^)\" + '(?:\"([^\"]*(?:\"\"[^\"]*)*)\"|' + '([^\"\\\\' + strDelimiter + \"\\\\r\\\\n]*))\", \"gi\");\n  var arrData = [[]];\n  var arrMatches = null;\n  while (arrMatches = objPattern.exec(strData)) {\n    var strMatchedDelimiter = arrMatches[1];\n    if (strMatchedDelimiter.length && strMatchedDelimiter !== strDelimiter) {\n      arrData.push([]);\n    }\n    var strMatchedValue;\n    if (arrMatches[2]) {\n      strMatchedValue = arrMatches[2].replace(new RegExp('\"\"', \"g\"), '\"');\n    } else {\n      strMatchedValue = arrMatches[3];\n    }\n    arrData[arrData.length - 1].push(strMatchedValue);\n  }\n  var headers = arrData[0];\n  var result = [];\n  for (let i = 1; i < arrData.length; i++) {\n    var obj = {};\n    var currentline = arrData[i];\n    for (var j = 0; j < headers.length; j++) {\n      obj[headers[j]] = currentline[j];\n    }\n    obj['CompoundId'] = Generator.getUUID();\n    obj['BatchId'] = appsmith.URL.queryParams.BatchId;\n    result.push(obj);\n  }\n  return result;\n}"
    ],
    "userSetOnLoad": false,
    "confirmBeforeExecute": false,
    "policies": [],
    "userPermissions": []
  },
  "id": "AllCompoundsNoFilter_UploadCSVHelper.csv2JSON",
  "deleted": false,
  "gitSyncId": "63ebd5c8a01b764626f25a3c_63efb231295431490fd8b75f"
}